import os
import re
from typing import List

from src.dataset.dataset import Question
from src.query.language_models import GeminiModel, LanguageModel
from src.query.PromptBuilder import NewsRetrievalPromptBuilder
from src.query.utils import retry_on_model_failure


def generate_search_queries(
    question: Question,
    language_model: LanguageModel = None,
    num_queries: int = 10,
    max_query_words: int = 10,
    include_question: bool = True,
) -> List[str]:
    """Generates search queries for a given question using a language model.

    Parameters
    ----------
    question : Question
    language_model : LanguageModel, optional
        If no language model is proved, one is picked by the function, by default None
    num_queries : int, optional
        Number of queries to generate, by default 10
    max_query_words : int, optional
        Maximum number of words per query, by default 10
    include_question : bool, optional
        Whether to include the original question in the queries, by default True

    Returns
    -------
    List[str]
        Queries generated by the language model
    """
    assert num_queries > 0, "Number of queries must be greater than 0"
    assert max_query_words > 0, "Number of words per query must be greater than 0"

    if language_model is None:
        language_model = GeminiModel(
            os.environ.get("GEMINI_API_KEY"), "gemini-1.5-pro-001"
        )
    system_prompt = NewsRetrievalPromptBuilder.get_system_prompt(max_query_words)
    user_prompt = NewsRetrievalPromptBuilder.get_user_prompt(question, num_queries)

    @retry_on_model_failure(max_retries=3)
    def get_queries(user_prompt, system_prompt):
        query_pattern = r"\d+\.\s+(.*?)(?:[;.]|\n|$)"
        response = language_model.query_model(user_prompt, system_prompt)
        queries = re.findall(query_pattern, response)
        if len(queries) != num_queries:
            raise ValueError(
                f"The model did only return {len(queries)} and not"
                f" {num_queries} queries."
            )
        return queries

    queries = get_queries(user_prompt, system_prompt)
    if include_question:
        queries.append(question.title)
    return queries
